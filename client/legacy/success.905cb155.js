import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, a as space, t as text, y as query_selector_all, c as claim_element, h as detach_dev, g as claim_space, b as children, j as claim_text, k as attr_dev, l as add_location, n as append_dev, m as insert_dev, F as noop } from './client.493f3c45.js';

/* src/routes/success.svelte generated by Svelte v3.29.0 */
const file = "src/routes/success.svelte";

function create_fragment(ctx) {
  let meta0;
  let meta1;
  let meta2;
  let meta3;
  let meta4;
  let t0;
  let section0;
  let h1;
  let t1;
  let t2;
  let h2;
  let t3;
  let t4;
  let section1;
  let img;
  let img_src_value;
  let t5;
  let div;
  let h3;
  let t6;
  let t7;
  let h4;
  let t8;
  const block = {
    c: function create() {
      meta0 = element("meta");
      meta1 = element("meta");
      meta2 = element("meta");
      meta3 = element("meta");
      meta4 = element("meta");
      t0 = space();
      section0 = element("section");
      h1 = element("h1");
      t1 = text("Success!");
      t2 = space();
      h2 = element("h2");
      t3 = text("If you've ordered a book, I've just sent you an email where you can download it, in any format, anytime. If you bought me a coffee, then thank you, legend!");
      t4 = space();
      section1 = element("section");
      img = element("img");
      t5 = space();
      div = element("div");
      h3 = element("h3");
      t6 = text("Get Reading!");
      t7 = space();
      h4 = element("h4");
      t8 = text("Feel free to use the e-book on anything with a screen! To get it onto your kindle, simply plug it in and copy the file across.");
      this.h();
    },
    l: function claim(nodes) {
      const head_nodes = query_selector_all("[data-svelte=\"svelte-1r371z1\"]", document.head);
      meta0 = claim_element(head_nodes, "META", {
        property: true,
        content: true
      });
      meta1 = claim_element(head_nodes, "META", {
        property: true,
        content: true
      });
      meta2 = claim_element(head_nodes, "META", {
        property: true,
        content: true
      });
      meta3 = claim_element(head_nodes, "META", {
        property: true,
        content: true
      });
      meta4 = claim_element(head_nodes, "META", {
        property: true,
        content: true
      });
      head_nodes.forEach(detach_dev);
      t0 = claim_space(nodes);
      section0 = claim_element(nodes, "SECTION", {
        class: true
      });
      var section0_nodes = children(section0);
      h1 = claim_element(section0_nodes, "H1", {
        class: true
      });
      var h1_nodes = children(h1);
      t1 = claim_text(h1_nodes, "Success!");
      h1_nodes.forEach(detach_dev);
      t2 = claim_space(section0_nodes);
      h2 = claim_element(section0_nodes, "H2", {
        class: true
      });
      var h2_nodes = children(h2);
      t3 = claim_text(h2_nodes, "If you've ordered a book, I've just sent you an email where you can download it, in any format, anytime. If you bought me a coffee, then thank you, legend!");
      h2_nodes.forEach(detach_dev);
      section0_nodes.forEach(detach_dev);
      t4 = claim_space(nodes);
      section1 = claim_element(nodes, "SECTION", {
        class: true
      });
      var section1_nodes = children(section1);
      img = claim_element(section1_nodes, "IMG", {
        class: true,
        alt: true,
        src: true
      });
      t5 = claim_space(section1_nodes);
      div = claim_element(section1_nodes, "DIV", {
        class: true
      });
      var div_nodes = children(div);
      h3 = claim_element(div_nodes, "H3", {
        class: true
      });
      var h3_nodes = children(h3);
      t6 = claim_text(h3_nodes, "Get Reading!");
      h3_nodes.forEach(detach_dev);
      t7 = claim_space(div_nodes);
      h4 = claim_element(div_nodes, "H4", {
        class: true
      });
      var h4_nodes = children(h4);
      t8 = claim_text(h4_nodes, "Feel free to use the e-book on anything with a screen! To get it onto your kindle, simply plug it in and copy the file across.");
      h4_nodes.forEach(detach_dev);
      div_nodes.forEach(detach_dev);
      section1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      document.title = "Great Work, Oblivious is on the way!";
      attr_dev(meta0, "property", "og:description");
      attr_dev(meta0, "content", "Your order of Oblivious is on the way");
      add_location(meta0, file, 7, 4, 280);
      attr_dev(meta1, "property", "og:url");
      attr_dev(meta1, "content", "http://www.obliviousthebook.com/success");
      add_location(meta1, file, 9, 4, 376);
      attr_dev(meta2, "property", "og:site_name");
      attr_dev(meta2, "content", "ObliviousTheBook.com");
      add_location(meta2, file, 10, 4, 456);
      attr_dev(meta3, "property", "fb:admins");
      attr_dev(meta3, "content", "563453705");
      add_location(meta3, file, 11, 4, 523);
      attr_dev(meta4, "property", "og:image");
      attr_dev(meta4, "content", "/images/logo-750.png");
      add_location(meta4, file, 12, 4, 576);
      attr_dev(h1, "class", "text-4xl md:text-5xl text-center");
      add_location(h1, file, 17, 4, 725);
      attr_dev(h2, "class", "text-xl md:text-3xl text-center");
      add_location(h2, file, 18, 4, 788);
      attr_dev(section0, "class", "flex flex-col items-center my-14 md:my-32");
      add_location(section0, file, 16, 0, 661);
      attr_dev(img, "class", "w-full md:w-3/5 my-4");
      attr_dev(img, "alt", "computer with sendowl payment portal");
      if (img.src !== (img_src_value = "/images/how-step3.jpg")) attr_dev(img, "src", img_src_value);
      add_location(img, file, 21, 4, 1085);
      attr_dev(h3, "class", "text-3xl md:text-5xl");
      add_location(h3, file, 23, 8, 1226);
      attr_dev(h4, "class", "text-xl md:text-2xl");
      add_location(h4, file, 24, 8, 1285);
      attr_dev(div, "class", "md:pl-20");
      add_location(div, file, 22, 4, 1195);
      attr_dev(section1, "class", "flex flex-col md:flex-row items-center mb-20 md:mb-32 px-8");
      add_location(section1, file, 20, 0, 1004);
    },
    m: function mount(target, anchor) {
      append_dev(document.head, meta0);
      append_dev(document.head, meta1);
      append_dev(document.head, meta2);
      append_dev(document.head, meta3);
      append_dev(document.head, meta4);
      insert_dev(target, t0, anchor);
      insert_dev(target, section0, anchor);
      append_dev(section0, h1);
      append_dev(h1, t1);
      append_dev(section0, t2);
      append_dev(section0, h2);
      append_dev(h2, t3);
      insert_dev(target, t4, anchor);
      insert_dev(target, section1, anchor);
      append_dev(section1, img);
      append_dev(section1, t5);
      append_dev(section1, div);
      append_dev(div, h3);
      append_dev(h3, t6);
      append_dev(div, t7);
      append_dev(div, h4);
      append_dev(h4, t8);
    },
    p: noop,
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      detach_dev(meta0);
      detach_dev(meta1);
      detach_dev(meta2);
      detach_dev(meta3);
      detach_dev(meta4);
      if (detaching) detach_dev(t0);
      if (detaching) detach_dev(section0);
      if (detaching) detach_dev(t4);
      if (detaching) detach_dev(section1);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance($$self, $$props) {
  let {
    $$slots: slots = {},
    $$scope
  } = $$props;
  validate_slots("Success", slots, []);
  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Success> was created with unknown prop '${key}'`);
  });
  return [];
}

class Success extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Success",
      options,
      id: create_fragment.name
    });
  }

}

export default Success;
