import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, G as validate_each_argument, H as validate_store, I as component_subscribe, v as validate_slots, J as stores$1, f as fade, P as PageTransition, e as element, t as text, a as space, c as claim_element, b as children, j as claim_text, h as detach_dev, g as claim_space, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, p as listen_dev, q as set_data_dev, r as add_render_callback, K as create_in_transition, L as create_out_transition, M as empty, x as create_component, z as claim_component, A as mount_component, B as transition_in, C as transition_out, E as destroy_component, N as check_outros, O as destroy_each, w as run_all, Q as toggle_class, R as create_slot, T as group_outros, F as noop, U as update_slot } from './client.ec22e3dc.js';
import { r as readerPosition } from './reader-hints.e4bb2b66.js';

/* src/routes/read/_layout.svelte generated by Svelte v3.29.0 */
const file = "src/routes/read/_layout.svelte";

function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  child_ctx[18] = i;
  return child_ctx;
}

function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[13] = list[i];
  child_ctx[15] = i;
  return child_ctx;
} // (43:0) {#if recommendJumpToChapter}


function create_if_block_1(ctx) {
  let div2;
  let div1;
  let p0;
  let t0;
  let t1;
  let p1;
  let t2;
  let t3;
  let div0;
  let a;
  let t4;
  let t5_value =
  /*$readerPosition*/
  ctx[4][1] + "";
  let t5;
  let a_href_value;
  let t6;
  let span;
  let t7;
  let div2_intro;
  let div2_outro;
  let current;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      div2 = element("div");
      div1 = element("div");
      p0 = element("p");
      t0 = text("Looks like you've been here before...");
      t1 = space();
      p1 = element("p");
      t2 = text("Want to pick up where you left off?");
      t3 = space();
      div0 = element("div");
      a = element("a");
      t4 = text("Sure, take me to chapter ");
      t5 = text(t5_value);
      t6 = space();
      span = element("span");
      t7 = text("Nup");
      this.h();
    },
    l: function claim(nodes) {
      div2 = claim_element(nodes, "DIV", {
        class: true
      });
      var div2_nodes = children(div2);
      div1 = claim_element(div2_nodes, "DIV", {
        class: true
      });
      var div1_nodes = children(div1);
      p0 = claim_element(div1_nodes, "P", {
        class: true
      });
      var p0_nodes = children(p0);
      t0 = claim_text(p0_nodes, "Looks like you've been here before...");
      p0_nodes.forEach(detach_dev);
      t1 = claim_space(div1_nodes);
      p1 = claim_element(div1_nodes, "P", {
        class: true
      });
      var p1_nodes = children(p1);
      t2 = claim_text(p1_nodes, "Want to pick up where you left off?");
      p1_nodes.forEach(detach_dev);
      t3 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", {});
      var div0_nodes = children(div0);
      a = claim_element(div0_nodes, "A", {
        class: true,
        href: true
      });
      var a_nodes = children(a);
      t4 = claim_text(a_nodes, "Sure, take me to chapter ");
      t5 = claim_text(a_nodes, t5_value);
      a_nodes.forEach(detach_dev);
      t6 = claim_space(div0_nodes);
      span = claim_element(div0_nodes, "SPAN", {
        class: true
      });
      var span_nodes = children(span);
      t7 = claim_text(span_nodes, "Nup");
      span_nodes.forEach(detach_dev);
      div0_nodes.forEach(detach_dev);
      div1_nodes.forEach(detach_dev);
      div2_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(p0, "class", "font-header text-xl md:text-2xl");
      add_location(p0, file, 49, 6, 1944);
      attr_dev(p1, "class", "font-sans text-base md:text-lg mb-4");
      add_location(p1, file, 52, 6, 2051);
      attr_dev(a, "class", "inline-block text-base md:text-lg p-2 rounded-lg no-underline bg-oblivious");
      attr_dev(a, "href", a_href_value = "read/" +
      /*$readerPosition*/
      ctx[4][0] + "/" +
      /*$readerPosition*/
      ctx[4][1]);
      add_location(a, file, 56, 8, 2174);
      attr_dev(span, "class", "inline-block text-base md:text-lg p-2 rounded-lg no-underline bg-white border border-solid border-oblivious cursor-pointer");
      add_location(span, file, 61, 8, 2412);
      add_location(div0, file, 55, 6, 2160);
      attr_dev(div1, "class", "rounded-lg bg-white p-2 md:p-16 flex flex-col text-center m-2");
      add_location(div1, file, 48, 4, 1862);
      attr_dev(div2, "class", "fixed inset-0 flex justify-center items-center bg-oblivious-opaque z-10");
      add_location(div2, file, 43, 2, 1722);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div2, anchor);
      append_dev(div2, div1);
      append_dev(div1, p0);
      append_dev(p0, t0);
      append_dev(div1, t1);
      append_dev(div1, p1);
      append_dev(p1, t2);
      append_dev(div1, t3);
      append_dev(div1, div0);
      append_dev(div0, a);
      append_dev(a, t4);
      append_dev(a, t5);
      append_dev(div0, t6);
      append_dev(div0, span);
      append_dev(span, t7);
      current = true;

      if (!mounted) {
        dispose = listen_dev(span, "click",
        /*click_handler*/
        ctx[7], false, false, false);
        mounted = true;
      }
    },
    p: function update(ctx, dirty) {
      if ((!current || dirty &
      /*$readerPosition*/
      16) && t5_value !== (t5_value =
      /*$readerPosition*/
      ctx[4][1] + "")) set_data_dev(t5, t5_value);

      if (!current || dirty &
      /*$readerPosition*/
      16 && a_href_value !== (a_href_value = "read/" +
      /*$readerPosition*/
      ctx[4][0] + "/" +
      /*$readerPosition*/
      ctx[4][1])) {
        attr_dev(a, "href", a_href_value);
      }
    },
    i: function intro(local) {
      if (current) return;
      add_render_callback(() => {
        if (div2_outro) div2_outro.end(1);
        if (!div2_intro) div2_intro = create_in_transition(div2, fade, {
          delay: 1000
        });
        div2_intro.start();
      });
      current = true;
    },
    o: function outro(local) {
      if (div2_intro) div2_intro.invalidate();
      div2_outro = create_out_transition(div2, fade, {});
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div2);
      if (detaching && div2_outro) div2_outro.end();
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(43:0) {#if recommendJumpToChapter}",
    ctx
  });
  return block;
} // (89:4) {#if bookIndex + 1 < 4}


function create_if_block(ctx) {
  let t0;
  let t1_value =
  /*bookIndex*/
  ctx[15] + 1 + "";
  let t1;
  let t2;
  let ul;
  let t3;
  let each_value_1 = [...Array(
  /*chapterCount*/
  ctx[13])];
  validate_each_argument(each_value_1);
  let each_blocks = [];

  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }

  const block = {
    c: function create() {
      t0 = text("Book ");
      t1 = text(t1_value);
      t2 = space();
      ul = element("ul");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      t3 = space();
      this.h();
    },
    l: function claim(nodes) {
      t0 = claim_text(nodes, "Book ");
      t1 = claim_text(nodes, t1_value);
      t2 = claim_space(nodes);
      ul = claim_element(nodes, "UL", {});
      var ul_nodes = children(ul);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(ul_nodes);
      }

      t3 = claim_space(ul_nodes);
      ul_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      add_location(ul, file, 90, 6, 3441);
    },
    m: function mount(target, anchor) {
      insert_dev(target, t0, anchor);
      insert_dev(target, t1, anchor);
      insert_dev(target, t2, anchor);
      insert_dev(target, ul, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(ul, null);
      }

      append_dev(ul, t3);
    },
    p: function update(ctx, dirty) {
      if (dirty &
      /*slug, recommendJumpToChapter, navOpen, chapterCounts*/
      15) {
        each_value_1 = [...Array(
        /*chapterCount*/
        ctx[13])];
        validate_each_argument(each_value_1);
        let i;

        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx, each_value_1, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_1(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(ul, t3);
          }
        }

        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }

        each_blocks.length = each_value_1.length;
      }
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t0);
      if (detaching) detach_dev(t1);
      if (detaching) detach_dev(t2);
      if (detaching) detach_dev(ul);
      destroy_each(each_blocks, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(89:4) {#if bookIndex + 1 < 4}",
    ctx
  });
  return block;
} // (92:8) {#each [...Array(chapterCount)] as _, chapterIndex}


function create_each_block_1(ctx) {
  let li;
  let a;
  let t0;
  let t1_value =
  /*chapterIndex*/
  ctx[18] + 1 + "";
  let t1;
  let a_href_value;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      li = element("li");
      a = element("a");
      t0 = text("Chapter ");
      t1 = text(t1_value);
      this.h();
    },
    l: function claim(nodes) {
      li = claim_element(nodes, "LI", {
        class: true
      });
      var li_nodes = children(li);
      a = claim_element(li_nodes, "A", {
        rel: true,
        href: true
      });
      var a_nodes = children(a);
      t0 = claim_text(a_nodes, "Chapter ");
      t1 = claim_text(a_nodes, t1_value);
      a_nodes.forEach(detach_dev);
      li_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(a, "rel", "prefetch");
      attr_dev(a, "href", a_href_value = "read/" + (
      /*bookIndex*/
      ctx[15] + 1) + "/" + (
      /*chapterIndex*/
      ctx[18] + 1));
      add_location(a, file, 102, 12, 3835);
      attr_dev(li, "class", "ml-4 p-2 rounded-md");
      toggle_class(li, "bg-oblivious",
      /*slug*/
      ctx[3] &&
      /*bookIndex*/
      ctx[15] + 1 === +
      /*slug*/
      ctx[3][0] &&
      /*chapterIndex*/
      ctx[18] + 1 === +
      /*slug*/
      ctx[3][1]);
      add_location(li, file, 92, 10, 3516);
    },
    m: function mount(target, anchor) {
      insert_dev(target, li, anchor);
      append_dev(li, a);
      append_dev(a, t0);
      append_dev(a, t1);

      if (!mounted) {
        dispose = listen_dev(li, "click",
        /*click_handler_2*/
        ctx[9], false, false, false);
        mounted = true;
      }
    },
    p: function update(ctx, dirty) {
      if (dirty &
      /*slug*/
      8) {
        toggle_class(li, "bg-oblivious",
        /*slug*/
        ctx[3] &&
        /*bookIndex*/
        ctx[15] + 1 === +
        /*slug*/
        ctx[3][0] &&
        /*chapterIndex*/
        ctx[18] + 1 === +
        /*slug*/
        ctx[3][1]);
      }
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(li);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block_1.name,
    type: "each",
    source: "(92:8) {#each [...Array(chapterCount)] as _, chapterIndex}",
    ctx
  });
  return block;
} // (88:2) {#each chapterCounts as chapterCount, bookIndex}


function create_each_block(ctx) {
  let if_block_anchor;
  let if_block =
  /*bookIndex*/
  ctx[15] + 1 < 4 && create_if_block(ctx);
  const block = {
    c: function create() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block) if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert_dev(target, if_block_anchor, anchor);
    },
    p: function update(ctx, dirty) {
      if (
      /*bookIndex*/
      ctx[15] + 1 < 4) if_block.p(ctx, dirty);
    },
    d: function destroy(detaching) {
      if (if_block) if_block.d(detaching);
      if (detaching) detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block.name,
    type: "each",
    source: "(88:2) {#each chapterCounts as chapterCount, bookIndex}",
    ctx
  });
  return block;
} // (114:4) <PageTransition>


function create_default_slot(ctx) {
  let current;
  const default_slot_template =
  /*#slots*/
  ctx[6].default;
  const default_slot = create_slot(default_slot_template, ctx,
  /*$$scope*/
  ctx[11], null);
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }

      current = true;
    },
    p: function update(ctx, dirty) {
      if (default_slot) {
        if (default_slot.p && dirty &
        /*$$scope*/
        2048) {
          update_slot(default_slot, default_slot_template, ctx,
          /*$$scope*/
          ctx[11], dirty, null, null);
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(114:4) <PageTransition>",
    ctx
  });
  return block;
} // (113:2) {#key slug}


function create_key_block(ctx) {
  let pagetransition;
  let current;
  pagetransition = new PageTransition({
    props: {
      $$slots: {
        default: [create_default_slot]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(pagetransition.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(pagetransition.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(pagetransition, target, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const pagetransition_changes = {};

      if (dirty &
      /*$$scope*/
      2048) {
        pagetransition_changes.$$scope = {
          dirty,
          ctx
        };
      }

      pagetransition.$set(pagetransition_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(pagetransition.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(pagetransition.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(pagetransition, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_key_block.name,
    type: "key",
    source: "(113:2) {#key slug}",
    ctx
  });
  return block;
}

function create_fragment(ctx) {
  let t0;
  let button;
  let t1;
  let span;
  let t2_value = (
  /*navOpen*/
  ctx[1] ? "‹" : "›") + "";
  let t2;
  let t3;
  let nav;
  let nav_class_value;
  let t4;
  let div;
  let previous_key =
  /*slug*/
  ctx[3];
  let current;
  let mounted;
  let dispose;
  let if_block =
  /*recommendJumpToChapter*/
  ctx[2] && create_if_block_1(ctx);
  let each_value =
  /*chapterCounts*/
  ctx[0];
  validate_each_argument(each_value);
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }

  let key_block = create_key_block(ctx);
  const block = {
    c: function create() {
      if (if_block) if_block.c();
      t0 = space();
      button = element("button");
      t1 = text("📖 ");
      span = element("span");
      t2 = text(t2_value);
      t3 = space();
      nav = element("nav");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      t4 = space();
      div = element("div");
      key_block.c();
      this.h();
    },
    l: function claim(nodes) {
      if (if_block) if_block.l(nodes);
      t0 = claim_space(nodes);
      button = claim_element(nodes, "BUTTON", {
        class: true
      });
      var button_nodes = children(button);
      t1 = claim_text(button_nodes, "📖 ");
      span = claim_element(button_nodes, "SPAN", {
        class: true
      });
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach_dev);
      button_nodes.forEach(detach_dev);
      t3 = claim_space(nodes);
      nav = claim_element(nodes, "NAV", {
        class: true
      });
      var nav_nodes = children(nav);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(nav_nodes);
      }

      nav_nodes.forEach(detach_dev);
      t4 = claim_space(nodes);
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      key_block.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(span, "class", "absolute font-black top-1/2 right-1 transform -translate-y-1/2");
      add_location(span, file, 77, 5, 2921);
      attr_dev(button, "class", "absolute top-0 md:top-12 left-0 w-12 h-12 text-lg md:w-16 md:h-16 md:text-2xl bg-oblivious rounded-r-xl");
      add_location(button, file, 73, 0, 2752);
      attr_dev(nav, "class", nav_class_value = "absolute z-10 top-16 md:top-32 left-0 h-4/5vh max-h-96 right-auto overflow-y-scroll transform " + (
      /*navOpen*/
      ctx[1] ? "translate-x-0" : "-translate-x-full") + " transition-all duration-1000 ease-in-out bg-white p-4 rounded-r-lg border-solid border-oblivious-dark border-2");
      add_location(nav, file, 82, 0, 3049);
      add_location(div, file, 111, 0, 4030);
    },
    m: function mount(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert_dev(target, t0, anchor);
      insert_dev(target, button, anchor);
      append_dev(button, t1);
      append_dev(button, span);
      append_dev(span, t2);
      insert_dev(target, t3, anchor);
      insert_dev(target, nav, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(nav, null);
      }

      insert_dev(target, t4, anchor);
      insert_dev(target, div, anchor);
      key_block.m(div, null);
      current = true;

      if (!mounted) {
        dispose = [listen_dev(button, "click",
        /*click_handler_1*/
        ctx[8], false, false, false), listen_dev(div, "click",
        /*click_handler_3*/
        ctx[10], false, false, false)];
        mounted = true;
      }
    },
    p: function update(ctx, [dirty]) {
      if (
      /*recommendJumpToChapter*/
      ctx[2]) {
        if (if_block) {
          if_block.p(ctx, dirty);

          if (dirty &
          /*recommendJumpToChapter*/
          4) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t0.parentNode, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }

      if ((!current || dirty &
      /*navOpen*/
      2) && t2_value !== (t2_value = (
      /*navOpen*/
      ctx[1] ? "‹" : "›") + "")) set_data_dev(t2, t2_value);

      if (dirty &
      /*Array, chapterCounts, slug, recommendJumpToChapter, navOpen*/
      15) {
        each_value =
        /*chapterCounts*/
        ctx[0];
        validate_each_argument(each_value);
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(nav, null);
          }
        }

        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }

        each_blocks.length = each_value.length;
      }

      if (!current || dirty &
      /*navOpen*/
      2 && nav_class_value !== (nav_class_value = "absolute z-10 top-16 md:top-32 left-0 h-4/5vh max-h-96 right-auto overflow-y-scroll transform " + (
      /*navOpen*/
      ctx[1] ? "translate-x-0" : "-translate-x-full") + " transition-all duration-1000 ease-in-out bg-white p-4 rounded-r-lg border-solid border-oblivious-dark border-2")) {
        attr_dev(nav, "class", nav_class_value);
      }

      if (dirty &
      /*slug*/
      8 && safe_not_equal(previous_key, previous_key =
      /*slug*/
      ctx[3])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block(ctx);
        key_block.c();
        transition_in(key_block);
        key_block.m(div, null);
      } else {
        key_block.p(ctx, dirty);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      transition_in(key_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      transition_out(key_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (if_block) if_block.d(detaching);
      if (detaching) detach_dev(t0);
      if (detaching) detach_dev(button);
      if (detaching) detach_dev(t3);
      if (detaching) detach_dev(nav);
      destroy_each(each_blocks, detaching);
      if (detaching) detach_dev(t4);
      if (detaching) detach_dev(div);
      key_block.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

function preload({
  params,
  query
}) {
  return __awaiter(this, void 0, void 0, function* () {
    const res = yield this.fetch(`read/book-index.json`);
    const chapterCounts = yield res.json();

    if (res.status === 200) {
      return {
        chapterCounts
      };
    } else {
      this.error(res.status);
    }
  });
}

function instance($$self, $$props, $$invalidate) {
  let $page;
  let $readerPosition;
  validate_store(readerPosition, "readerPosition");
  component_subscribe($$self, readerPosition, $$value => $$invalidate(4, $readerPosition = $$value));
  let {
    $$slots: slots = {},
    $$scope
  } = $$props;
  validate_slots("Layout", slots, ['default']);
  let {
    chapterCounts
  } = $$props;
  const {
    page
  } = stores$1();
  validate_store(page, "page");
  component_subscribe($$self, page, value => $$invalidate(12, $page = value));
  let navOpen = false;
  let recommendJumpToChapter = false;
  const writable_props = ["chapterCounts"];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Layout> was created with unknown prop '${key}'`);
  });

  const click_handler = () => {
    $$invalidate(2, recommendJumpToChapter = false);
    readerPosition.set(null);
  };

  const click_handler_1 = () => $$invalidate(1, navOpen = !navOpen);

  const click_handler_2 = () => {
    $$invalidate(2, recommendJumpToChapter = false);
    $$invalidate(1, navOpen = false);
  };

  const click_handler_3 = () => $$invalidate(1, navOpen = false);

  $$self.$$set = $$props => {
    if ("chapterCounts" in $$props) $$invalidate(0, chapterCounts = $$props.chapterCounts);
    if ("$$scope" in $$props) $$invalidate(11, $$scope = $$props.$$scope);
  };

  $$self.$capture_state = () => ({
    __awaiter,
    preload,
    stores: stores$1,
    fade,
    PageTransition,
    readerPosition,
    chapterCounts,
    page,
    navOpen,
    recommendJumpToChapter,
    slug,
    $page,
    $readerPosition
  });

  $$self.$inject_state = $$props => {
    if ("chapterCounts" in $$props) $$invalidate(0, chapterCounts = $$props.chapterCounts);
    if ("navOpen" in $$props) $$invalidate(1, navOpen = $$props.navOpen);
    if ("recommendJumpToChapter" in $$props) $$invalidate(2, recommendJumpToChapter = $$props.recommendJumpToChapter);
    if ("slug" in $$props) $$invalidate(3, slug = $$props.slug);
  };

  let slug;

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*$page*/
    4096) {
       $$invalidate(3, slug = $page.params.slug ? $page.params.slug.map(x => +x) : null);
    }

    if ($$self.$$.dirty &
    /*slug, $readerPosition*/
    24) {
       if (!slug && $readerPosition && $readerPosition[0] && $readerPosition[1]) {
        $$invalidate(2, recommendJumpToChapter = true);
      } else {
        $$invalidate(2, recommendJumpToChapter = false);
      }
    }
  };

  return [chapterCounts, navOpen, recommendJumpToChapter, slug, $readerPosition, page, slots, click_handler, click_handler_1, click_handler_2, click_handler_3, $$scope];
}

class Layout extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      chapterCounts: 0
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Layout",
      options,
      id: create_fragment.name
    });
    const {
      ctx
    } = this.$$;
    const props = options.props || {};

    if (
    /*chapterCounts*/
    ctx[0] === undefined && !("chapterCounts" in props)) {
      console.warn("<Layout> was created without expected prop 'chapterCounts'");
    }
  }

  get chapterCounts() {
    throw new Error("<Layout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set chapterCounts(value) {
    throw new Error("<Layout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

export default Layout;
export { preload };
